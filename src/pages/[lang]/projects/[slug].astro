---
import {getEntryBySlug} from "astro:content";
import { changeLanguage } from "i18next";
import ProjectDetailsLayout from "../../../layouts/ProjectDetailsLayout.astro";
import { marked } from 'marked';
import {rehype} from 'rehype'
import {rehypeHeadingIds} from "@astrojs/markdown-remark";
import rehypeAutolinkHeadings from 'rehype-autolink-headings'
import 'dotenv/config';
export const prerender = false;

async function getProject(slug: string) {
    let project = await getEntryBySlug("projects", slug);
    console.log("getProject", slug, project != null);
    if (project?.data.url?.match(/^https:\/\/github.com\/\w+\/[\w-_.]+$/)) {
        let response = await fetch(project.data.url.replace("github.com", "api.github.com/repos"), {
            headers: {
                "Accept": "application/vnd.github+json",
                "Authorization": "Bearer " + process.env.GITHUB_TOKEN
            }
        });
        if (!response.ok) {
            console.log("GitHub project fetch failed", response.status);
            project.data.extendedData = {};
            return project;
        }
        console.log("GitHub project fetch OK");
        let data = await response.json();
        if (project.data.shortDescription === undefined) project.data.shortDescription = data.description;
        project.data.tags = [...new Set([...project.data.tags || [], ...data.topics])];
        project.data.publicationDate = new Date(data.pushed_at);
        project.data.extendedData = {
            stars: data.stargazers_count,
            forks: data.forks,
            homepage: data.homepage
        }
        if (project?.body.length > 0) return project;
        const readme = await fetch(`https://raw.githubusercontent.com/${data.full_name}/${data.default_branch}/README.md`);
        if (!readme.ok) {
            console.log("GitHub project README fetch failed", readme.status);
            return project;
        }
        console.log("GitHub project README fetch OK");
        project.body = await readme.text();
        return project;
    } else {
        console.log("Not a GitHub project");
        return project;
    }
}

changeLanguage(Astro.params.lang);
const slug = `${Astro.params.slug}/${Astro.params.lang}`;
const entry = await getProject(slug);
const content = marked.parse(entry.body,{mangle:false, headerIds: false});
const withHeaders = rehype().use(rehypeHeadingIds).use(rehypeAutolinkHeadings,{
    behavior: "wrap",
      properties: {
        class: "heading-linker"
      }
}).processSync(content).toString();
---

<ProjectDetailsLayout id={entry.id} slug={entry.slug} projectData={entry.data} set:html={withHeaders}/>
